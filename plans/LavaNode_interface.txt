

Should every output be optional in some way? 
- Should every packet have the possibility of being an error packet that 
  | shows there is an error
  | has an error number
  | has an optional string with an error message 
  | would error packets still need their frame number, their source node and their destination node? 

Questions:
 - What data needs to be embedded in the .dll ?
 - How to reference data? 64 bits that hold an index, a type, and if that type is a pack* of that type
 - Need one bit to signal whether the index is an address in memory or an index into the database?
 - Need to use a key string instead so that indices can be swapped out inside the data base?
 - Index into database would be the index of a hash table slot instead of the index of the first block?

Handling Inputs and Outputs:
 - On the function level use an array of 64 bit integers
   - How large? Intel xeon phi has 288 threads - 512 64 bit integers would be 4,096 bytes which would be one page
   - Declared as const this should incur 8KB of storage, one for input and one for output?
   - Is a limit neccesary? could the memory be a pointer that uses either stack storage or a thread local allocation if the stack storage is not enough? 
 - number of inputs and outputs both given as arguments
 - wrap the arguments pointers and lengths in a LavaArgs struct?
 - make custom functions to iterate over arguements and the packs they contain?
 - should gather and scatter arguments be different somehow?
 - should gather and scatter be something integrated into the pack format?
 - gather and scatter are additional data and don't need to be individual node types?
 - only data flow and message passing nodes are different types and the inputs and outputs are where the differentiation lies?
 - this means that inputs need extra data for their 'flow type' or 'format' etc
   - split and join need to be node types since they deal with what is taken from the queue?

Data Flow Types:
 - are they all data transformations?
 - should scatter and gather be combined into one underlying technique? 
 - would that mean a switch between parallel and serial? 
 - scatter
 - gather
 - split
 - join
 - generator create data out of nowhere? even a file read should take data from a message passing node?
 - scatter and split would be the same thing, except for order? 
 - does each data pack need to have a version of some sort anyway?
 - if ordering is taken care of due to a version/id number then scatter needs a lane/tile number or should this be taken care of by the data structure?
   - lane/tile number could be neccesary so that normal nodes put after a scatter are all getting the same 'section'/'tile' of data
 - if every parameter is a list of indices, would scatter be just a matter of how the parameter is treated? 
   - does gather need to guarantee it see data on every lane? 


Should data flow nodes have a separate function from the main that runs first?
 - Gives the number of allocations along with each of their sizes
 - Then one thread local allocation could be done
 - Would be difficult for larger nodes to give the maximum amount of memory needed if they had the potential to re-use memory. - need to write why 


Pack:
 - A serialized table of individual serialized data
 - Must be all the same type?
 - Can be different sizes 
 - Starting bytes of a pack is the total size in bytes, then a table of offsets - length can be derived from the offsets and data types would have size bytes at the front anyway? 
 - Should packs / lists be used always?


Security:
 - 4k used to have 512 inputs and 512 outputs in some format
 - each input and output could be put in their own isolated page 
 - this would allow setting security permissions on the pages, such as read only or write only
 - pages put on low and hi boundaries could be set with retrictive permissions 
 - this would cause immediate faults on any out of bounds reads or writes


Make loading priority for nodes, or load them when it is first known that they will be needed based on data flow and messaging?


Emit Packets using a function instead of outputting into an array:
 - Flexible number of packets can be emitted
 - Decreased latency of emitted packets getting processed
 - Possibly simpler API
 - Lock free queue can be used 
 - After emitting all packets, emitting thread can then sort them and put them into a cache or NUMA local lock free queue


Display text of the file inside a node
|  Have a window inside a node that can show the directory, or the text of the main file


Statics - done with name.type.const files
|  Have a second struct list of structs looked for that contains 'statics'
|  LavaStatic or LavaConst?
|  Type, length, then array of bytes


Nodes need to be aware of which outputs are connected
|  Easiest way might be to have LavaParams have an output bitmap



Constructors, Destructors and state management when hot reloading
|  Should constructors take a void* pointer and size that give an optional state to use?
|  Should destructors take parameters to write out a state on destruction?
|  |  Could take a void* and a max size
|  |  If the the destructor needs more size it will have to do something different
|  |  Could take a pointer to the max size and if it needs more bytes, the new size will be written  
|  |  Need to return a value signaling that construction was done 
|  |  Passing a void pointer could signal to destruct without writing state 


Should packets or inputs have a write flag?
|  Packets that are sent to a single input could be modified and resent 
|  Might be rare since packets can be resent already and modification would have to happen without changing the memory allocation  
| 


Return Values and Node Output Messages
|  Could have an enum that is SUCCESS, WARNING, ERROR
|  LavaParams could hold a putc-ish function pointer that would carry a message with it 
|  Strings for the output messages could also be part of the owned mem and somehow passed back to a GUI or not
|  Should there be flag to LavaInit to say whether it is being run inside a GUI? 
|  |  This would allow it to skip output messages and immediatly decrement their reference count 
|  |  If the flag was in LavaParams maybe the node could do something with it also, like skip output messages
|  LavaOut could also be a message string that then gets used in the LavaLoop
|  |  Probably doesn't need to be turned in to a packet since it just needs to get to the user, doesn't go to other nodes 
|  |  Could be put into a callback function
|  If callbacks need to be thread safe, is there a way that packets and output strings/messages could be put into a thread safe queue?
|  |  Could be multi-writer single reader
|  |  GUI thread can just call whenever and deal with all the messages and packets available
|  |  Probably would deal with whole queue at some point in the main loop


Minimizing Work During Iteration
|  Issues: caching, specific node execution, dependant nodes 
|  Forks (node that takes more than one input) are where caching can occur to not recompute parts of the graph
|  Should dependencies stop at the generator nodes even if the generator has inputs? 
|  Does a separate CACHE node type make sense even if there is a GENERATOR type? 
|  |  CACHE node can at least be thread safe by using malloc (if it is thread safe) and doing an exchange on the cache pointer then freeing the pointer that was there before 
|  Dynamic caching in the long run? 
|  |  Could automatically cache outputs with the (longest time)/(least data combination) - Simple time to recreate data number for cache effectiveness 
|  |  Cache size could be set 
|  Does interactive workflow imply that some nodes need to be labeled UI/Interactive only?
|



-------------------------------------------------------------------------------------------
Simplicity does not precede complexity, but follows it.

LISP programmers know the value of everything and the cost of nothing.

One man's constant is another man's variable.

Greenspun's tenth rule: Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp

Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.

A programming language is low level when its programs require attention to the irrelevant.
------------------------------------------------------------------------------------------







