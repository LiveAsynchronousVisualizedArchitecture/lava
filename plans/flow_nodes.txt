

Should data flow nodes have a separate function from the main that runs first?
 - Gives the number of allocations along with each of their sizes
 - Then one thread local allocation could be done
 - Would be difficult for larger nodes to give the maximum amount of memory needed if they had the potential to re-use memory.


Is scatter needed?
 - The real synchronization should come from data
 - Ordering can be done at any point by sorting on the version number
 - any list should be able to be 'scattered' and processed by different threads because the data is separate


Make message passing nodes circles and data flow containers squares
 | both could contain stats
 | the message passing nodes could have segments on the border that show their connections/messages to data flow containers and other message nodes
 | | use an arc along the border and change it to hav a teardrop shaped protrusion that transitions into the line/noodle showing the connection?




Can there be a node that enables shared memory parallelism like openMP?
|  Need an init() method that looks at the input and allocates memory for the output 
|  |  Will this need to use global memory allocation like malloc, jemalloc, or rpmalloc?
|  Need a method to get the next section of memory to operate on, possibly just needs to increment an ID atomically
|  Should this only be a node that creates multiple packets that contain all that is needed for other nodes to use shared memory parallelism?
|  |  Would need to be an actual memory address to non-thread local memory
|  |  Need to have a flag saying that it is a memory address and not an index
|  |  Need to contain the global memory address, the ID for what section this packet is for and a way to reference count the global address so it can be freed?
|  |  Would want a tbl with it that would contain parameters for how to use the memory and the ID (like image dimensions)




Node Types
|  how to handle constant inputs
|  |  should each node have a potential tbl of constants?
|  |  this would mean the first argument could be a tbl/pointer to the table memory
|  |  when using the node graph, the table could be output as a .h file and compiled into the shared library 
|  |  the constants tbl could be passed into the node function or use an implicit pointer


Accumulator / General loop and iteration 
|  Should there be a specific accumulator node? 
|  Can accumulation of the output with new inputs be done with:
|  |  Nodes able to take optional arguments
|  |  A node that takes a list and an optional argument to inject into that list
|  |  The ability to make circular references in the graph
|  Does the ability to make circular references depend on either branching, optional arguments or both so that there is a way to break out of the loop? 
|  |  accumulation could be done with a branching node before the accumulator node 
|  |  the branch bypasses the accumulator if there is only one packet in the list
|  |  if there is more than one packet, the branch goes to the accumulator
|  |  the accumulator's output would go back in to the branch   -------the branch node's single packet path and the accumulator's output path go to some node with two optional inputs - could even be another accumulator node
|  |  the branch would need two inputs to collect all the packets - if there is only one it bypasses the accumulator, if there are multiple, it feeds them into the accumulator


