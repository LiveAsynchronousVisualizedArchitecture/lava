
GUI:

- single in and out snap to each other vertically or horizontally

- if any message passing node OR data transforms that it calls can pass a
  message, draw a line between those two message passing nodes and have that
  line contain information on what exactly is passing a message to what. 
  This is analogous to jonathan blow's 'arcs' and 'circles' assertion that 
  the 'arcs' are where the complexity of a program comes from.

- connections colored and decorated (dashed, dotted, striped) based on type
- have connnections show their type on mouse over

- make connection wires going to two or more nodes split the connecting
  wire close to the destination nodes instead of having two separate wires both
  going from source to destination
- make connecting wires try to avoid being behind nodes


---------
| NODES |
---------

- overall premise is that the gui should be clear yet uncluttered
  |- this can be accomplished by different levels of detail
  |- zooming out simplifies what is shown
  |- mousing over shows more detail
  |- mouse over plus space shows more controls and/or stats and info

- node controls hidden until mouse over, or possibly mouse over plus space or some mouse button?
  |- mouse over animates a border fattening up around the pill to show in and out slots
  |- mouse over animates labeled lines with circles on the end coming out of the node to show available IO ? 
- nodes shapes as pills with borders that give information or show connections
- when snapping together vertically or horizontally, change to boxes with rounded corners
- when connecting two different types, give a choice of nodes that take the src type in and give the dest type out
  |- show the nodes in a circular menu surrounding the mouse cursor most likely on the side left, then side right, then up, then down
  |- give option to create a new node that will have those inputs and ouputs in the center, for fast creation of conversion nodes
- on new node creation, use a template so that new nodes work out of the box
  |- need to have the correct function signature
  |- need to have an exported static struct list that gives the information for the function call
- nodes show more detail when zooming in, less when zoomed out
  |- node without text
  |- node with text
  |- node with border showing outputs and inputs
  |- node showing labels on inputs and outputs
  |- connections showing labels 
- connections have labels written along the noodle/line when zoomed in
- connections evade going behind nodes or overlapping other connections
  |- can connections be a blend of noodle/manhatten/straight ?
- shape change based on straight macro style sequence vs graph
  |- when connected as a vertical or horizontal list, nodes shift to being more square with slightly rounded corners (like nuke or scratch)
  |- when floating as part of a general graph nodes have a fat pill shape (like shake crossed with flame)



- have message passing nodes be a separate window partition
- message passing nodes as circles since they can't snap to other nodes?
- show message wires between messsage passing nodes
- show wires go from blue to red to orange to yellow based on how many messages are passed 
- connecting wires need to have direction arrows since connections will be directional
- wires have to be created during runtime or at least by running once?
- shift arrows forward by roughly a pixel on every message to show further what messages are passed
- wires get thicker with multiple lanes if one node sends multiple different messages to the same node?





