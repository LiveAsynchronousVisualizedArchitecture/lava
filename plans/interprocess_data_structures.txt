
possibly come up with a more general set of data structures for inter-process communication
|  how to find other programs and how to register your own program to be communicated with 
|  |  tags? 
|  |  declare interfaces? 
|  |  declare data transformations? 
|  |  declare data types that you accept and give back?  
|  |  combinations or heirarchies of these things? - declare as a program that you accept utf-8 strings that are URLs for example 
|  |  is the communication always going to come down to data formats, and if so, can tbl.hpp be used effectivly for any data format?
|  how to actually do the communication?
|  |  common shared memory where each program has a messege queue 
|  |  messeges can have a key into the shared memory database (simdb.hpp)
|  what other data structures might be useful between programs? 
|  |  heap
|  |  stack
|  |  list
|  |  strings
|  |  sorted/ordered maps
|  |  sets



shared memory queue
|  use indices and blocks like simdb?
|  |  make the concurrent store into a template and use the concurrent list as is?
|  integrate into simdb, giving names to each of the queue channels? 
|  have different version for data types that are all the same size?

shared memory priority queue
|  figure out lock free concurrent heap
|  does having only a version number, then a mapping of the version to the index help?
|  does having some sort of loose sorting, then reading multiple versions/indices at a time help?
|  does it help to have packets of indices, each with their own packet version help? would this imply a heirarchy?
|  would it work to have the index buffer be in 128 bit aligned chunks, with each chunk representing a double buffering of versioned indices? 
|  |  put versions in the middle with flag bits that determine which side to use 
|  |  put next versions on the opposing sides, then check the versions in the middle and swap the bits 


single writer single reader table
|  have a table sitting in shared memory
|  make sure that it can't return corrupted results by any reading processes 
|  just have to make sure that a key that is in progress of being written doesn't end up being a match? 
|  |  if the key is in progress of being written, then it wouldn't match its own hash (probably), but definitely wouldn't match its own length if it was zeroed out from the start 
|  |  zeroing out from the start of the string would mean that the first bytes could be set to 0 atomically
|  |  this could create a way to atomically switch off key strings, but would mean that keys could blink out of existence 
|  |  keys blinking out of existence might be ok, since it would be rare, and the value would be the important part, which could be made atomic
|  |  the value type could be included in a 128 bit aligned chunk with the value (and the hash? and the length?)
|  |  this would mean that the key-value pair should be on 64 bytes cache line boundaries and the value + type would need to be 128 bit aligned
|  |  this would only matter for atomic reads though, so that the value and type don't get out of sync

