



----------------------------------------------------
| tbl: a combination vector, string and hash table |
----------------------------------------------------
data needed:
 - total size in bytes
 - length of vector/string memory
 - length of hash table memory

attributes:
 - single pointer on stack or pointer+sizeBytes+split on stack?
 - flat in memory 
 - first 8 bytes is the size in bytes
 - next 8 bytes is the position of the split between the vector and table
 - one free byte kept in the middle and set to 0 to make c_string() work
 - memory storage should be largely untemplated
 - template types only used to cast void* and i8* pointers to the given type
 - zero overhead serialization due to always being in serialized state?
   - slight overhead serialization from copying sizeBytes and vector/hash table divider to and from the stack?
   - this is fine because it can be used from the serialized state easily?
 - use a flag bit on the pointer for ownership?
 - use separate types for serialized and unserialized? 
 - make an implicit cast operator for integer types to cast the type to the size automically? 
 - make hash map start from the highest memory and work down

dependencies: 
 - malloc
 - realloc
 - memcpy



 // - template only for working on top of raw memory vector 


    tbl something;
    something("wat");
    something[85];
    something("wat").asInt();
    int wat = something("wat");

    class wat
    {
      enum type { i32, ui64, u8, tbl, float, double };
      short data;
      operator int()
      {
        switch(type)
        case u8:
          return (int)data;
        case tbl:
          return ((tbl)data).size();
      }
    };

 tbl ~ tbl 
 tbl + tbl  - add all elemnts in the vectors together and returns a new table

operator[](std::pair) - return a slice from the array?


make a merge function that takes a function and uses it to merge the keys that are the same between two tables
|  passes the two values in
|  how to deal with types? take a template lambda and/or use the casts that are already there?


make a function that will cast a tbl of unknown type to a tbl of a templated type

build in smaller fundamental types by making them arrays that fill up the 8 bytes in kv segment? 
u32[2], f32[2], i16[4], i8[8], u8[8] etc. 

