

The pieces are simdb, tbl, visualizer, node graph interface, execution loop
 
simdb.hpp     -  Lock free shared memory key value store. Currently working.

Future Work   -  Lock free robin hood hashing.

tbl.hpp           -   A vector+hash table data structure that is always a single span of contiguous memory and thus has no separate serialization. Useful as a general purpose high level data structure so that custom structures that and their serialization are not needed as often.   Next step is to nest tbl structures so that trees and compound data structures can be created easily as well.  Working but missing nested tables.

Future Work  - Nesting tables as pointers or offsets into contiguous memory. 

Visualizer:  -Separate process that draws textured 3d geometry from other processes. Uses simdb to get data which enables it to update at greater than 144 frames per second.  Currently working and in fact has been already been used to debug my commercial product.

Future Work:  Showing the vector, key-value, and nested tbl contents of a tbl structure.  Estimate: 8 days 

node graph interface - Initial Prototype - Still in it's infancy though shows that openGL + nanovg can be used to provide a fluid and great looking interface.

Execution loop:  The actual execution of the program being created. Takes data packets from a lock free queue, passes them to the node they go to, gets the outputs and puts them into the queue.     Not Yet Started  -  Previous Prototypes.






Total days: 37 -> roughly 6 weeks at 6 days per week.


The individual components are simdb, tbl, the visualizer, the node graph interface and the execution loop.  Most of the time would go into the node graph and execution loop since the other parts have signifanct progress already. Some additional time could be used to polish tbl.hpp and simdb.hpp so that they could be released individually and used to promote the architecture as a whole. 
 
Node graph interface - 15 days: Still in its infancy, though shows that OpenGL+NanoVG can be used to provide a fluid and great looking interface. The goal would be:
 | A workable interface for building data flow graphs and displaying message passing nodes
 | Dynamic reloading of nodes when underlying shared library changes 
 | Ability to visualize any types in the shared memory that can be converted to images or geometry
 | Ability to isolate a node so that dynamic reloading + specific data the node and visualizes the result
 | The ability to load and save workspace files

Execution loop - 8 days:  
 | Define plug-in API for shared libaries
 | Take data packets from a lock free queue, pass to their destination node
 | Get the outputs and put them into the queue
 | Run message passing nodes with their messages when available


simdb.hpp  - 4 days: Lock free robin hood hashing.
tbl.hpp    - 4 days: Nesting tables as offsets into contiguous memory. 
Visualizer - 6 days: Showing the vector, key-value and nested tbl contents of a tbl structure.  





